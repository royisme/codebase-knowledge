/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AdminTasksRouteImport } from './routes/admin/tasks'
import { Route as AdminSourcesRouteImport } from './routes/admin/sources'
import { Route as AdminRepositoriesRouteImport } from './routes/admin/repositories'
import { Route as AdminRbacRouteImport } from './routes/admin/rbac'
import { Route as AdminRagConsoleRouteImport } from './routes/admin/rag-console'
import { Route as AdminPoliciesRouteImport } from './routes/admin/policies'
import { Route as AdminAuditRouteImport } from './routes/admin/audit'
import { Route as AdminAnalyticsRouteImport } from './routes/admin/analytics'
import { Route as AuthenticatedRagConsoleRouteImport } from './routes/_authenticated/rag-console'
import { Route as AuthenticatedKnowledgeLibraryRouteImport } from './routes/_authenticated/knowledge-library'
import { Route as AuthenticatedKnowledgeGraphQueryRouteImport } from './routes/_authenticated/knowledge-graph-query'
import { Route as AuthenticatedKnowledgeExploreRouteImport } from './routes/_authenticated/knowledge-explore'
import { Route as AuthenticatedAnalyticsRouteImport } from './routes/_authenticated/analytics'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as authLdapRouteImport } from './routes/(auth)/ldap'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as AuthenticatedSettingsRouteRouteImport } from './routes/_authenticated/settings/route'
import { Route as AuthenticatedUsersIndexRouteImport } from './routes/_authenticated/users/index'
import { Route as AuthenticatedTasksIndexRouteImport } from './routes/_authenticated/tasks/index'
import { Route as AuthenticatedHelpCenterIndexRouteImport } from './routes/_authenticated/help-center/index'
import { Route as AuthenticatedChatsIndexRouteImport } from './routes/_authenticated/chats/index'
import { Route as AuthenticatedAppsIndexRouteImport } from './routes/_authenticated/apps/index'
import { Route as AuthenticatedSettingsAppearanceRouteImport } from './routes/_authenticated/settings/appearance'
import { Route as AuthenticatedSettingsAccountRouteImport } from './routes/_authenticated/settings/account'
import { Route as AuthenticatedErrorsErrorRouteImport } from './routes/_authenticated/errors/$error'
import { Route as AdminRepositoriesRepoIdJobsRouteImport } from './routes/admin/repositories/$repoId.jobs'
import { Route as AdminRepositoriesRepoIdJobsJobIdRouteImport } from './routes/admin/repositories/$repoId.jobs.$jobId'

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AdminTasksRoute = AdminTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminSourcesRoute = AdminSourcesRouteImport.update({
  id: '/sources',
  path: '/sources',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminRepositoriesRoute = AdminRepositoriesRouteImport.update({
  id: '/repositories',
  path: '/repositories',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminRbacRoute = AdminRbacRouteImport.update({
  id: '/rbac',
  path: '/rbac',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminRagConsoleRoute = AdminRagConsoleRouteImport.update({
  id: '/rag-console',
  path: '/rag-console',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminPoliciesRoute = AdminPoliciesRouteImport.update({
  id: '/policies',
  path: '/policies',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAuditRoute = AdminAuditRouteImport.update({
  id: '/audit',
  path: '/audit',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAnalyticsRoute = AdminAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AuthenticatedRagConsoleRoute = AuthenticatedRagConsoleRouteImport.update({
  id: '/rag-console',
  path: '/rag-console',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedKnowledgeLibraryRoute =
  AuthenticatedKnowledgeLibraryRouteImport.update({
    id: '/knowledge-library',
    path: '/knowledge-library',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedKnowledgeGraphQueryRoute =
  AuthenticatedKnowledgeGraphQueryRouteImport.update({
    id: '/knowledge-graph-query',
    path: '/knowledge-graph-query',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedKnowledgeExploreRoute =
  AuthenticatedKnowledgeExploreRouteImport.update({
    id: '/knowledge-explore',
    path: '/knowledge-explore',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedAnalyticsRoute = AuthenticatedAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const authLdapRoute = authLdapRouteImport.update({
  id: '/(auth)/ldap',
  path: '/ldap',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSettingsRouteRoute =
  AuthenticatedSettingsRouteRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedTasksIndexRoute = AuthenticatedTasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedHelpCenterIndexRoute =
  AuthenticatedHelpCenterIndexRouteImport.update({
    id: '/help-center/',
    path: '/help-center/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedChatsIndexRoute = AuthenticatedChatsIndexRouteImport.update({
  id: '/chats/',
  path: '/chats/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedAppsIndexRoute = AuthenticatedAppsIndexRouteImport.update({
  id: '/apps/',
  path: '/apps/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedSettingsAppearanceRoute =
  AuthenticatedSettingsAppearanceRouteImport.update({
    id: '/appearance',
    path: '/appearance',
    getParentRoute: () => AuthenticatedSettingsRouteRoute,
  } as any)
const AuthenticatedSettingsAccountRoute =
  AuthenticatedSettingsAccountRouteImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => AuthenticatedSettingsRouteRoute,
  } as any)
const AuthenticatedErrorsErrorRoute =
  AuthenticatedErrorsErrorRouteImport.update({
    id: '/errors/$error',
    path: '/errors/$error',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AdminRepositoriesRepoIdJobsRoute =
  AdminRepositoriesRepoIdJobsRouteImport.update({
    id: '/$repoId/jobs',
    path: '/$repoId/jobs',
    getParentRoute: () => AdminRepositoriesRoute,
  } as any)
const AdminRepositoriesRepoIdJobsJobIdRoute =
  AdminRepositoriesRepoIdJobsJobIdRouteImport.update({
    id: '/$jobId',
    path: '/$jobId',
    getParentRoute: () => AdminRepositoriesRepoIdJobsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/settings': typeof AuthenticatedSettingsRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRoute
  '/ldap': typeof authLdapRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/analytics': typeof AuthenticatedAnalyticsRoute
  '/knowledge-explore': typeof AuthenticatedKnowledgeExploreRoute
  '/knowledge-graph-query': typeof AuthenticatedKnowledgeGraphQueryRoute
  '/knowledge-library': typeof AuthenticatedKnowledgeLibraryRoute
  '/rag-console': typeof AuthenticatedRagConsoleRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/audit': typeof AdminAuditRoute
  '/admin/policies': typeof AdminPoliciesRoute
  '/admin/rag-console': typeof AdminRagConsoleRoute
  '/admin/rbac': typeof AdminRbacRoute
  '/admin/repositories': typeof AdminRepositoriesRouteWithChildren
  '/admin/sources': typeof AdminSourcesRoute
  '/admin/tasks': typeof AdminTasksRoute
  '/': typeof AuthenticatedIndexRoute
  '/errors/$error': typeof AuthenticatedErrorsErrorRoute
  '/settings/account': typeof AuthenticatedSettingsAccountRoute
  '/settings/appearance': typeof AuthenticatedSettingsAppearanceRoute
  '/apps': typeof AuthenticatedAppsIndexRoute
  '/chats': typeof AuthenticatedChatsIndexRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexRoute
  '/tasks': typeof AuthenticatedTasksIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/admin/repositories/$repoId/jobs': typeof AdminRepositoriesRepoIdJobsRouteWithChildren
  '/admin/repositories/$repoId/jobs/$jobId': typeof AdminRepositoriesRepoIdJobsJobIdRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminRouteRouteWithChildren
  '/settings': typeof AuthenticatedSettingsRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRoute
  '/ldap': typeof authLdapRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/analytics': typeof AuthenticatedAnalyticsRoute
  '/knowledge-explore': typeof AuthenticatedKnowledgeExploreRoute
  '/knowledge-graph-query': typeof AuthenticatedKnowledgeGraphQueryRoute
  '/knowledge-library': typeof AuthenticatedKnowledgeLibraryRoute
  '/rag-console': typeof AuthenticatedRagConsoleRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/audit': typeof AdminAuditRoute
  '/admin/policies': typeof AdminPoliciesRoute
  '/admin/rag-console': typeof AdminRagConsoleRoute
  '/admin/rbac': typeof AdminRbacRoute
  '/admin/repositories': typeof AdminRepositoriesRouteWithChildren
  '/admin/sources': typeof AdminSourcesRoute
  '/admin/tasks': typeof AdminTasksRoute
  '/': typeof AuthenticatedIndexRoute
  '/errors/$error': typeof AuthenticatedErrorsErrorRoute
  '/settings/account': typeof AuthenticatedSettingsAccountRoute
  '/settings/appearance': typeof AuthenticatedSettingsAppearanceRoute
  '/apps': typeof AuthenticatedAppsIndexRoute
  '/chats': typeof AuthenticatedChatsIndexRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexRoute
  '/tasks': typeof AuthenticatedTasksIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/admin/repositories/$repoId/jobs': typeof AdminRepositoriesRepoIdJobsRouteWithChildren
  '/admin/repositories/$repoId/jobs/$jobId': typeof AdminRepositoriesRepoIdJobsJobIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/ldap': typeof authLdapRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/_authenticated/analytics': typeof AuthenticatedAnalyticsRoute
  '/_authenticated/knowledge-explore': typeof AuthenticatedKnowledgeExploreRoute
  '/_authenticated/knowledge-graph-query': typeof AuthenticatedKnowledgeGraphQueryRoute
  '/_authenticated/knowledge-library': typeof AuthenticatedKnowledgeLibraryRoute
  '/_authenticated/rag-console': typeof AuthenticatedRagConsoleRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/audit': typeof AdminAuditRoute
  '/admin/policies': typeof AdminPoliciesRoute
  '/admin/rag-console': typeof AdminRagConsoleRoute
  '/admin/rbac': typeof AdminRbacRoute
  '/admin/repositories': typeof AdminRepositoriesRouteWithChildren
  '/admin/sources': typeof AdminSourcesRoute
  '/admin/tasks': typeof AdminTasksRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/errors/$error': typeof AuthenticatedErrorsErrorRoute
  '/_authenticated/settings/account': typeof AuthenticatedSettingsAccountRoute
  '/_authenticated/settings/appearance': typeof AuthenticatedSettingsAppearanceRoute
  '/_authenticated/apps/': typeof AuthenticatedAppsIndexRoute
  '/_authenticated/chats/': typeof AuthenticatedChatsIndexRoute
  '/_authenticated/help-center/': typeof AuthenticatedHelpCenterIndexRoute
  '/_authenticated/tasks/': typeof AuthenticatedTasksIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
  '/admin/repositories/$repoId/jobs': typeof AdminRepositoriesRepoIdJobsRouteWithChildren
  '/admin/repositories/$repoId/jobs/$jobId': typeof AdminRepositoriesRepoIdJobsJobIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/settings'
    | '/forgot-password'
    | '/ldap'
    | '/sign-in'
    | '/sign-up'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/analytics'
    | '/knowledge-explore'
    | '/knowledge-graph-query'
    | '/knowledge-library'
    | '/rag-console'
    | '/admin/analytics'
    | '/admin/audit'
    | '/admin/policies'
    | '/admin/rag-console'
    | '/admin/rbac'
    | '/admin/repositories'
    | '/admin/sources'
    | '/admin/tasks'
    | '/'
    | '/errors/$error'
    | '/settings/account'
    | '/settings/appearance'
    | '/apps'
    | '/chats'
    | '/help-center'
    | '/tasks'
    | '/users'
    | '/admin/repositories/$repoId/jobs'
    | '/admin/repositories/$repoId/jobs/$jobId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/settings'
    | '/forgot-password'
    | '/ldap'
    | '/sign-in'
    | '/sign-up'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/analytics'
    | '/knowledge-explore'
    | '/knowledge-graph-query'
    | '/knowledge-library'
    | '/rag-console'
    | '/admin/analytics'
    | '/admin/audit'
    | '/admin/policies'
    | '/admin/rag-console'
    | '/admin/rbac'
    | '/admin/repositories'
    | '/admin/sources'
    | '/admin/tasks'
    | '/'
    | '/errors/$error'
    | '/settings/account'
    | '/settings/appearance'
    | '/apps'
    | '/chats'
    | '/help-center'
    | '/tasks'
    | '/users'
    | '/admin/repositories/$repoId/jobs'
    | '/admin/repositories/$repoId/jobs/$jobId'
  id:
    | '__root__'
    | '/_authenticated'
    | '/admin'
    | '/_authenticated/settings'
    | '/(auth)/forgot-password'
    | '/(auth)/ldap'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/analytics'
    | '/_authenticated/knowledge-explore'
    | '/_authenticated/knowledge-graph-query'
    | '/_authenticated/knowledge-library'
    | '/_authenticated/rag-console'
    | '/admin/analytics'
    | '/admin/audit'
    | '/admin/policies'
    | '/admin/rag-console'
    | '/admin/rbac'
    | '/admin/repositories'
    | '/admin/sources'
    | '/admin/tasks'
    | '/_authenticated/'
    | '/_authenticated/errors/$error'
    | '/_authenticated/settings/account'
    | '/_authenticated/settings/appearance'
    | '/_authenticated/apps/'
    | '/_authenticated/chats/'
    | '/_authenticated/help-center/'
    | '/_authenticated/tasks/'
    | '/_authenticated/users/'
    | '/admin/repositories/$repoId/jobs'
    | '/admin/repositories/$repoId/jobs/$jobId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLdapRoute: typeof authLdapRoute
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/admin/tasks': {
      id: '/admin/tasks'
      path: '/tasks'
      fullPath: '/admin/tasks'
      preLoaderRoute: typeof AdminTasksRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/sources': {
      id: '/admin/sources'
      path: '/sources'
      fullPath: '/admin/sources'
      preLoaderRoute: typeof AdminSourcesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/repositories': {
      id: '/admin/repositories'
      path: '/repositories'
      fullPath: '/admin/repositories'
      preLoaderRoute: typeof AdminRepositoriesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/rbac': {
      id: '/admin/rbac'
      path: '/rbac'
      fullPath: '/admin/rbac'
      preLoaderRoute: typeof AdminRbacRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/rag-console': {
      id: '/admin/rag-console'
      path: '/rag-console'
      fullPath: '/admin/rag-console'
      preLoaderRoute: typeof AdminRagConsoleRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/policies': {
      id: '/admin/policies'
      path: '/policies'
      fullPath: '/admin/policies'
      preLoaderRoute: typeof AdminPoliciesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/audit': {
      id: '/admin/audit'
      path: '/audit'
      fullPath: '/admin/audit'
      preLoaderRoute: typeof AdminAuditRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/analytics': {
      id: '/admin/analytics'
      path: '/analytics'
      fullPath: '/admin/analytics'
      preLoaderRoute: typeof AdminAnalyticsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_authenticated/rag-console': {
      id: '/_authenticated/rag-console'
      path: '/rag-console'
      fullPath: '/rag-console'
      preLoaderRoute: typeof AuthenticatedRagConsoleRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/knowledge-library': {
      id: '/_authenticated/knowledge-library'
      path: '/knowledge-library'
      fullPath: '/knowledge-library'
      preLoaderRoute: typeof AuthenticatedKnowledgeLibraryRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/knowledge-graph-query': {
      id: '/_authenticated/knowledge-graph-query'
      path: '/knowledge-graph-query'
      fullPath: '/knowledge-graph-query'
      preLoaderRoute: typeof AuthenticatedKnowledgeGraphQueryRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/knowledge-explore': {
      id: '/_authenticated/knowledge-explore'
      path: '/knowledge-explore'
      fullPath: '/knowledge-explore'
      preLoaderRoute: typeof AuthenticatedKnowledgeExploreRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/analytics': {
      id: '/_authenticated/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AuthenticatedAnalyticsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/ldap': {
      id: '/(auth)/ldap'
      path: '/ldap'
      fullPath: '/ldap'
      preLoaderRoute: typeof authLdapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tasks/': {
      id: '/_authenticated/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof AuthenticatedTasksIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/help-center/': {
      id: '/_authenticated/help-center/'
      path: '/help-center'
      fullPath: '/help-center'
      preLoaderRoute: typeof AuthenticatedHelpCenterIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/chats/': {
      id: '/_authenticated/chats/'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AuthenticatedChatsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/apps/': {
      id: '/_authenticated/apps/'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AuthenticatedAppsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/settings/appearance': {
      id: '/_authenticated/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof AuthenticatedSettingsAppearanceRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteRoute
    }
    '/_authenticated/settings/account': {
      id: '/_authenticated/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof AuthenticatedSettingsAccountRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteRoute
    }
    '/_authenticated/errors/$error': {
      id: '/_authenticated/errors/$error'
      path: '/errors/$error'
      fullPath: '/errors/$error'
      preLoaderRoute: typeof AuthenticatedErrorsErrorRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/admin/repositories/$repoId/jobs': {
      id: '/admin/repositories/$repoId/jobs'
      path: '/$repoId/jobs'
      fullPath: '/admin/repositories/$repoId/jobs'
      preLoaderRoute: typeof AdminRepositoriesRepoIdJobsRouteImport
      parentRoute: typeof AdminRepositoriesRoute
    }
    '/admin/repositories/$repoId/jobs/$jobId': {
      id: '/admin/repositories/$repoId/jobs/$jobId'
      path: '/$jobId'
      fullPath: '/admin/repositories/$repoId/jobs/$jobId'
      preLoaderRoute: typeof AdminRepositoriesRepoIdJobsJobIdRouteImport
      parentRoute: typeof AdminRepositoriesRepoIdJobsRoute
    }
  }
}

interface AuthenticatedSettingsRouteRouteChildren {
  AuthenticatedSettingsAccountRoute: typeof AuthenticatedSettingsAccountRoute
  AuthenticatedSettingsAppearanceRoute: typeof AuthenticatedSettingsAppearanceRoute
}

const AuthenticatedSettingsRouteRouteChildren: AuthenticatedSettingsRouteRouteChildren =
  {
    AuthenticatedSettingsAccountRoute: AuthenticatedSettingsAccountRoute,
    AuthenticatedSettingsAppearanceRoute: AuthenticatedSettingsAppearanceRoute,
  }

const AuthenticatedSettingsRouteRouteWithChildren =
  AuthenticatedSettingsRouteRoute._addFileChildren(
    AuthenticatedSettingsRouteRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedSettingsRouteRoute: typeof AuthenticatedSettingsRouteRouteWithChildren
  AuthenticatedAnalyticsRoute: typeof AuthenticatedAnalyticsRoute
  AuthenticatedKnowledgeExploreRoute: typeof AuthenticatedKnowledgeExploreRoute
  AuthenticatedKnowledgeGraphQueryRoute: typeof AuthenticatedKnowledgeGraphQueryRoute
  AuthenticatedKnowledgeLibraryRoute: typeof AuthenticatedKnowledgeLibraryRoute
  AuthenticatedRagConsoleRoute: typeof AuthenticatedRagConsoleRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedErrorsErrorRoute: typeof AuthenticatedErrorsErrorRoute
  AuthenticatedAppsIndexRoute: typeof AuthenticatedAppsIndexRoute
  AuthenticatedChatsIndexRoute: typeof AuthenticatedChatsIndexRoute
  AuthenticatedHelpCenterIndexRoute: typeof AuthenticatedHelpCenterIndexRoute
  AuthenticatedTasksIndexRoute: typeof AuthenticatedTasksIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedSettingsRouteRoute: AuthenticatedSettingsRouteRouteWithChildren,
  AuthenticatedAnalyticsRoute: AuthenticatedAnalyticsRoute,
  AuthenticatedKnowledgeExploreRoute: AuthenticatedKnowledgeExploreRoute,
  AuthenticatedKnowledgeGraphQueryRoute: AuthenticatedKnowledgeGraphQueryRoute,
  AuthenticatedKnowledgeLibraryRoute: AuthenticatedKnowledgeLibraryRoute,
  AuthenticatedRagConsoleRoute: AuthenticatedRagConsoleRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedErrorsErrorRoute: AuthenticatedErrorsErrorRoute,
  AuthenticatedAppsIndexRoute: AuthenticatedAppsIndexRoute,
  AuthenticatedChatsIndexRoute: AuthenticatedChatsIndexRoute,
  AuthenticatedHelpCenterIndexRoute: AuthenticatedHelpCenterIndexRoute,
  AuthenticatedTasksIndexRoute: AuthenticatedTasksIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

interface AdminRepositoriesRepoIdJobsRouteChildren {
  AdminRepositoriesRepoIdJobsJobIdRoute: typeof AdminRepositoriesRepoIdJobsJobIdRoute
}

const AdminRepositoriesRepoIdJobsRouteChildren: AdminRepositoriesRepoIdJobsRouteChildren =
  {
    AdminRepositoriesRepoIdJobsJobIdRoute:
      AdminRepositoriesRepoIdJobsJobIdRoute,
  }

const AdminRepositoriesRepoIdJobsRouteWithChildren =
  AdminRepositoriesRepoIdJobsRoute._addFileChildren(
    AdminRepositoriesRepoIdJobsRouteChildren,
  )

interface AdminRepositoriesRouteChildren {
  AdminRepositoriesRepoIdJobsRoute: typeof AdminRepositoriesRepoIdJobsRouteWithChildren
}

const AdminRepositoriesRouteChildren: AdminRepositoriesRouteChildren = {
  AdminRepositoriesRepoIdJobsRoute:
    AdminRepositoriesRepoIdJobsRouteWithChildren,
}

const AdminRepositoriesRouteWithChildren =
  AdminRepositoriesRoute._addFileChildren(AdminRepositoriesRouteChildren)

interface AdminRouteRouteChildren {
  AdminAnalyticsRoute: typeof AdminAnalyticsRoute
  AdminAuditRoute: typeof AdminAuditRoute
  AdminPoliciesRoute: typeof AdminPoliciesRoute
  AdminRagConsoleRoute: typeof AdminRagConsoleRoute
  AdminRbacRoute: typeof AdminRbacRoute
  AdminRepositoriesRoute: typeof AdminRepositoriesRouteWithChildren
  AdminSourcesRoute: typeof AdminSourcesRoute
  AdminTasksRoute: typeof AdminTasksRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminAnalyticsRoute: AdminAnalyticsRoute,
  AdminAuditRoute: AdminAuditRoute,
  AdminPoliciesRoute: AdminPoliciesRoute,
  AdminRagConsoleRoute: AdminRagConsoleRoute,
  AdminRbacRoute: AdminRbacRoute,
  AdminRepositoriesRoute: AdminRepositoriesRouteWithChildren,
  AdminSourcesRoute: AdminSourcesRoute,
  AdminTasksRoute: AdminTasksRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLdapRoute: authLdapRoute,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
