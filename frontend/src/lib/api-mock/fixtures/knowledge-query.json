{
  "queries": [
    {
      "id": "q1",
      "question": "如何实现用户认证？",
      "answer": "系统使用 FastAPI Users 实现认证，支持 JWT token 和 OAuth2。主要流程包括：\n1. 用户通过 /api/v1/auth/login 登录\n2. 后端验证凭据并返回 access_token\n3. 前端在请求头中携带 Bearer token\n4. 后端中间件验证 token 并注入用户信息",
      "sources": [
        {
          "id": "ks-1",
          "name": "backend-repo",
          "file_path": "app/core/auth.py",
          "relevance": 0.95
        }
      ],
      "code_snippets": [
        {
          "file_path": "app/core/auth.py",
          "language": "python",
          "code": "async def get_current_user(\n    token: str = Depends(oauth2_scheme),\n    db: AsyncSession = Depends(get_async_session)\n) -> User:\n    credentials_exception = HTTPException(\n        status_code=401,\n        detail=\"Could not validate credentials\"\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        user_id: str = payload.get(\"sub\")\n        if user_id is None:\n            raise credentials_exception\n    except JWTError:\n        raise credentials_exception\n    \n    user = await db.get(User, user_id)\n    if user is None:\n        raise credentials_exception\n    return user",
          "start_line": 15,
          "end_line": 33,
          "relevance": 0.95
        }
      ],
      "graph_path": [
        {
          "type": "Module",
          "name": "auth",
          "id": "mod-auth"
        },
        {
          "type": "Function",
          "name": "get_current_user",
          "id": "func-get-current-user"
        }
      ],
      "related_entities": [
        {
          "type": "Class",
          "name": "User",
          "description": "用户模型"
        },
        {
          "type": "Function",
          "name": "create_access_token",
          "description": "创建 JWT token"
        }
      ],
      "created_at": "2025-10-30T10:30:00Z",
      "user_id": "user-1"
    },
    {
      "id": "q2",
      "question": "知识图谱是如何构建的？",
      "answer": "知识图谱通过以下步骤构建：\n1. Git 同步：克隆/更新代码仓库\n2. 代码解析：使用 Tree-sitter 解析源代码\n3. 实体抽取：识别类、函数、变量等代码实体\n4. 关系建立：分析调用关系、继承关系、依赖关系\n5. 图数据库存储：将实体和关系存入 Neo4j",
      "sources": [
        {
          "id": "ks-1",
          "name": "backend-repo",
          "file_path": "app/services/pipeline.py",
          "relevance": 0.92
        }
      ],
      "code_snippets": [
        {
          "file_path": "app/services/pipeline.py",
          "language": "python",
          "code": "class KnowledgePipeline:\n    def __init__(self, neo4j_service, parser_service):\n        self.neo4j = neo4j_service\n        self.parser = parser_service\n    \n    async def process_repository(self, repo_path: str):\n        # 1. 解析代码文件\n        entities = await self.parser.parse_directory(repo_path)\n        \n        # 2. 构建图结构\n        nodes = []\n        edges = []\n        for entity in entities:\n            nodes.append(self._create_node(entity))\n            edges.extend(self._extract_relationships(entity))\n        \n        # 3. 写入 Neo4j\n        await self.neo4j.create_nodes(nodes)\n        await self.neo4j.create_relationships(edges)\n        \n        return len(nodes), len(edges)",
          "start_line": 20,
          "end_line": 40,
          "relevance": 0.92
        }
      ],
      "graph_path": [],
      "related_entities": [],
      "created_at": "2025-10-30T11:45:00Z",
      "user_id": "user-1"
    }
  ],
  "sessions": [
    {
      "id": "session-1",
      "title": "认证系统研究",
      "query_ids": ["q1"],
      "created_at": "2025-10-30T10:00:00Z",
      "updated_at": "2025-10-30T10:30:00Z",
      "user_id": "user-1"
    }
  ],
  "notes": [
    {
      "id": "note-1",
      "query_id": "q1",
      "title": "JWT 认证实现要点",
      "content": "重点关注 token 过期处理和刷新机制",
      "tags": ["认证", "JWT", "安全"],
      "created_at": "2025-10-30T10:35:00Z",
      "user_id": "user-1"
    }
  ],
  "stats": {
    "total_queries": 2,
    "total_sessions": 1,
    "total_notes": 1,
    "recent_queries": 5,
    "avg_response_time": 1.2
  }
}
