{
  "payments-audit": {
    "answer": {
      "summary": "支付服务在 `record_audit` 函数中记录审计日志。该函数位于 `src/payments/audit.py` 中，通过接收支付事件参数（订单ID、金额、状态等），将审计信息异步写入 MongoDB 的 `audit_events` 集合，并同步发送到 Kafka 的 `payment-audit` topic 供下游分析系统消费。关键步骤包括：\n\n1. 参数校验与序列化\n2. 生成唯一审计ID\n3. 写入数据库（含重试机制）\n4. 发送到消息队列\n5. 记录操作日志",
      "steps": [
        "接收支付事件参数（order_id, amount, status, user_id 等）",
        "生成 UUID 作为审计事件唯一标识",
        "序列化事件数据为 JSON 格式",
        "调用 MongoClient 将审计记录写入 audit_events 集合",
        "发送审计消息到 Kafka payment-audit topic",
        "记录操作日志到应用日志系统"
      ],
      "code_snippets": [
        {
          "path": "src/payments/audit.py",
          "start_line": 42,
          "end_line": 68,
          "content": "async def record_audit(\n    order_id: str,\n    amount: Decimal,\n    status: PaymentStatus,\n    user_id: str,\n    metadata: dict[str, Any] | None = None,\n) -> str:\n    \"\"\"记录支付审计事件\n    \n    Args:\n        order_id: 订单ID\n        amount: 支付金额\n        status: 支付状态\n        user_id: 用户ID\n        metadata: 额外元数据\n    \n    Returns:\n        审计事件ID\n    \"\"\"\n    audit_id = str(uuid.uuid4())\n    event_data = {\n        \"audit_id\": audit_id,\n        \"order_id\": order_id,\n        \"amount\": str(amount),\n        \"status\": status.value,\n        \"user_id\": user_id,\n        \"metadata\": metadata or {},\n        \"created_at\": datetime.utcnow(),\n    }\n    \n    # 写入数据库\n    await mongo_client.audit_events.insert_one(event_data)\n    \n    # 发送到Kafka\n    await kafka_producer.send(\"payment-audit\", value=event_data)\n    \n    logger.info(f\"Audit event recorded: {audit_id}\")\n    return audit_id",
          "language": "python"
        },
        {
          "path": "src/payments/service.py",
          "start_line": 120,
          "end_line": 135,
          "content": "async def process_payment(order_id: str, amount: Decimal) -> PaymentResult:\n    \"\"\"处理支付请求\"\"\"\n    try:\n        # 验证订单\n        order = await validate_order(order_id)\n        \n        # 调用支付网关\n        payment_response = await payment_gateway.charge(\n            order_id=order_id,\n            amount=amount,\n        )\n        \n        # 记录审计\n        await record_audit(\n            order_id=order_id,\n            amount=amount,\n            status=PaymentStatus.SUCCESS,\n            user_id=order.user_id,\n        )\n        \n        return PaymentResult(success=True, transaction_id=payment_response.id)\n    except PaymentError as e:\n        # 支付失败也需要记录审计\n        await record_audit(\n            order_id=order_id,\n            amount=amount,\n            status=PaymentStatus.FAILED,\n            user_id=order.user_id,\n            metadata={\"error\": str(e)},\n        )\n        raise",
          "language": "python"
        }
      ],
      "links": [
        { "type": "file", "label": "audit.py", "url": "" },
        { "type": "file", "label": "service.py", "url": "" },
        { "type": "doc", "label": "MongoDB 审计表结构", "url": "" }
      ]
    },
    "related_entities": [
      {
        "type": "Function",
        "name": "record_audit",
        "path": "src/payments/audit.py",
        "description": "记录支付审计事件的核心函数"
      },
      {
        "type": "Function",
        "name": "process_payment",
        "path": "src/payments/service.py",
        "description": "处理支付请求的主流程"
      },
      {
        "type": "Class",
        "name": "PaymentStatus",
        "path": "src/payments/models.py",
        "description": "支付状态枚举"
      },
      {
        "type": "Collection",
        "name": "audit_events",
        "path": "MongoDB",
        "description": "审计事件存储集合"
      }
    ],
    "graph_paths": [
      {
        "description": "订单服务 -> 支付服务 -> 审计记录模块 -> MongoDB",
        "nodes": ["OrderService", "PaymentService", "AuditModule", "MongoDB"]
      },
      {
        "description": "支付服务 -> Kafka -> 数据分析服务",
        "nodes": ["PaymentService", "Kafka", "AnalyticsService"]
      }
    ],
    "source_metadata": {
      "selected_sources": [
        { "id": "src-001", "name": "payments-service" }
      ],
      "retrieval_mode": "hybrid",
      "execution_time_ms": 2100,
      "from_cache": false
    },
    "suggested_queries": [
      "支付失败后如何触发补偿？",
      "审计日志的保留策略是什么？",
      "如何查询特定订单的审计记录？"
    ]
  }
}
